def merge_sort(vals):
    n = len(vals)
    if n <= 1:
        return
    mid = n//2

    group1 = vals[:mid]
    group2 = vals[mid:]

    merge_sort(group1)
    merge_sort(group2)

    i_g1 = 0        # initialize the index for group 1
    i_g2 = 0        # initialize the index for group 2
    i_vals = 0      # initialize the index for the given array (values)

    while i_g1 < len(group1) and i_g2 < len(group2):
        if group1[i_g1] < group2[i_g2]:
            vals[i_vals] = group1[i_g1]
            i_g1 += 1
            i_vals += 1
        else:
            vals[i_vals] = group2[i_g2]
            i_g2 += 1
            i_vals += 1

    while i_g1 < len(group1):
        vals[i_vals] = group1[i_g1]
        i_g1 += 1
        i_vals += 1
    while i_g2 < len(group2):
        vals[i_vals] = group2[i_g2]
        i_g2 += 1
        i_vals += 1
    return vals

d = [1, 3, 5, 3, 2, 4, 5, 6, 10, 7, 8]
print(merge_sort(d))
